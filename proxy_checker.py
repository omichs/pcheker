import requests
import threading
from concurrent.futures import ThreadPoolExecutor
import logging
from tqdm import tqdm
import functools

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
logging.basicConfig(level=logging.INFO, format='%(message)s')
log = logging.getLogger()

# URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ç–∞–π–º–∞—É—Ç
TEST_URL = 'https://api.ipify.org?format=json'
TIMEOUT = 15

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Ç–æ–∫–æ–≤
file_lock = threading.Lock()
stop_event = threading.Event()

def check_proxy(proxy):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ–∫—Å–∏ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º SOCKS5, SOCKS4, HTTP.
    –ü—Ä–µ–∫—Ä–∞—â–∞–µ—Ç —Ä–∞–±–æ—Ç—É, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ stop_event.
    """
    if stop_event.is_set():
        return

    proxy_protocols = {
        'socks5': f'socks5h://{proxy}',
        'socks4': f'socks4h://{proxy}',
        'http': f'http://{proxy}',
    }

    for proto_name, proxy_url in proxy_protocols.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ
        if stop_event.is_set():
            return
            
        proxies = {'http': proxy_url, 'https': proxy_url}
        
        try:
            response = requests.get(TEST_URL, proxies=proxies, timeout=TIMEOUT)
            response.raise_for_status()

            if 'ip' in response.json():
                with file_lock: # –ë–ª–æ–∫–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –≤—ã–≤–æ–¥ –Ω–µ —Å–º–µ—à–∏–≤–∞–ª—Å—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
                    log.info(f"\n‚úÖ [–†–ê–ë–û–¢–ê–ï–¢] {proxy} –∫–∞–∫ {proto_name.upper()}")
                save_proxy(proxy, proto_name)
                return
        
        # –û—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–∏—Ö–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –≤—ã–≤–æ–¥.
        # –í—ã–≤–æ–¥ –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
        except (requests.exceptions.ProxyError, requests.exceptions.Timeout, requests.exceptions.RequestException):
            # log.debug(f"[-] {proxy} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∫–∞–∫ {proto_name.upper()}")
            pass
        except Exception:
            # log.debug(f"[!] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å {proxy} ({proto_name.upper()})")
            pass

def save_proxy(proxy, proxy_type):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª."""
    filename = f"{proxy_type}_proxies.txt"
    with file_lock:
        with open(filename, 'a') as f:
            f.write(proxy + '\n')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    try:
        with open('proxies.txt', 'r') as f:
            proxies_to_check = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        log.error("–û—à–∏–±–∫–∞: –§–∞–π–ª 'proxies.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        log.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ 'proxies.txt' –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏.")
        return

    if not proxies_to_check:
        log.warning("–§–∞–π–ª 'proxies.txt' –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å.")
        return

    log.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É {len(proxies_to_check)} –ø—Ä–æ–∫—Å–∏... (–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")

    try:
        with ThreadPoolExecutor(max_workers=25) as executor:
            # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É tqdm –¥–ª—è –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            results = list(tqdm(executor.map(check_proxy, proxies_to_check), 
                                total=len(proxies_to_check), 
                                desc="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏",
                                unit="proxy"))
    except KeyboardInterrupt:
        log.info("\n\nüõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        stop_event.set()
        # –î–∞–µ–º –ø–æ—Ç–æ–∫–∞–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
        # executor.shutdown(wait=True) # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–∞, —Ç.–∫. with —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç shutdown
    except Exception as e:
        log.error(f"\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


    log.info("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    log.info("–†–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã: http_proxies.txt, socks4_proxies.txt, socks5_proxies.txt")


if __name__ == "__main__":
    main()
